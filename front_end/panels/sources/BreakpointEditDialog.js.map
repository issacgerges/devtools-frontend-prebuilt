{"version":3,"file":"BreakpointEditDialog.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/BreakpointEditDialog.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAGhD,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,0BAA0B,MAAM,+BAA+B,CAAC;AAEvE,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,cAAc,EAAE,iBAAiB;IACjC;;MAEE;IACF,UAAU,EAAE,YAAY;IACxB;;MAEE;IACF,qBAAqB,EAAE,wBAAwB;IAC/C;;MAEE;IACF,QAAQ,EAAE,UAAU;IACpB;;MAEE;IACF,gCAAgC,EAAE,gDAAgD;IAClF;;MAEE;IACF,+BAA+B,EAAE,uCAAuC;IACxE;;;;;MAKE;IACF,gBAAgB,EAAE,iCAAiC;IACnD;;MAEE;IACF,8BAA8B,EAAE,wCAAwC;CACzE,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,wCAAwC,EAAE,SAAS,CAAC,CAAC;AAC9F,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,OAAO,oBAAqB,SAAQ,EAAE,CAAC,MAAM,CAAC,MAAM;IAqC3C;IApCI,QAAQ,CAGL;IACZ,QAAQ,CAAU;IAClB,MAAM,CAAmC;IACzC,UAAU,CAAU;IACX,YAAY,CAA6B;IAClD,sBAAsB,CAAyB;IAEvD,MAAM,CAAC,KAAK,CAAC,MAAM,CACf,gBAAwB,EACxB,YAAoB,EACpB,cAAuB,EACvB,QAA0E;QAE5E,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,gDAAgD,CAAC,CAAC;QAClF,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,sDAAsD,CAAC,CAAC;QACxF,MAAM,YAAY,GAAG;YACnB,CAAC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,kBAAkB;YAClD,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,IAAI,EAAE,CAAC;YACvD,UAAU,CAAC,UAAU,CAAC,YAAY;YAClC,UAAU,CAAC,MAAM,CAAC,kBAAkB;YACpC,MAAM,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE;YACxC,UAAU,CAAC,UAAU,CAAC,aAAa,EAAE;SACtC,CAAC;QACF,OAAO,IAAI,oBAAoB,CAC3B,gBAAgB,EAAE,YAAY,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;IACtG,CAAC;IAED,YACI,gBAAwB,EACxB,YAAoB,EACpB,cAAuB,EACvB,QAA0E,EAC1E,aAAgC,EACvB,aAAgC,EACzC,YAAkC;QAEpC,KAAK,CAAC,IAAI,CAAC,CAAC;QAHD,kBAAa,GAAb,aAAa,CAAmB;QAK3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QAE3B,MAAM,cAAc,GAAG,cAAc,CAAC;QACtC,MAAM,cAAc,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACnG,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;SAC3G;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,cAAc,CAAC;QAEpD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,iCAAiC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC/F,OAAO,CAAC,UAAU,CAAC,QAAQ,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpD,IAAI,CAAC,YAAY;YACb,IAAI,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;QACxG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;QAC5F,MAAM,iBAAiB,GACnB,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;QAC5G,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC/G,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;QAC/E,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAG,YAAY,IAAI,EAAE,CAAC;QACnC,MAAM,gBAAgB,GAAG,CAAC,IAA2B,EAAW,EAAE;YAChE,IAAI,aAAa,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC7D,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC3D,OAAO,IAAI,CAAC;aACb;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QACF,MAAM,MAAM,GAAG;YACb;gBACE,GAAG,EAAE,WAAW;gBAChB,GAAG,EAAE,gBAAgB;aACtB;YACD;gBACE,GAAG,EAAE,OAAO;gBACZ,GAAG,EAAE,gBAAgB;aACtB;YACD;gBACE,GAAG,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,KAAK,OAAO,CAA0B;gBACjG,GAAG,EAAE,aAAa;aACnB;YACD;gBACE,GAAG,EAAE,QAAQ;gBACb,GAAG,EAAE,GAAY,EAAE;oBACjB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;oBAC9B,OAAO,IAAI,CAAC;gBACd,CAAC;aACF;SACF,CAAC;QAEF,IAAI,CAAC,sBAAsB,GAAG,IAAI,aAAa,CAAC,WAAW,EAAE,CAAC;QAE9D,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QACrF,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEhD,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC;YACrF,GAAG,EAAE,OAAO;YACZ,SAAS,EAAE,EAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,MAAM,EAAC;YAC5C,UAAU,EAAE;gBACV,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACrD,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC;gBAC/B,YAAY;aACb;SACF,CAAC,CAAC,CAAC;QACJ,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEvC,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YAC5C,IAAI,CAAC,KAAK,CAAC,aAAa;gBACpB,CAAC,KAAK,CAAC,aAAa,IAAI,CAAE,KAAK,CAAC,aAAsB,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;gBAC5F,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC5D;QACH,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAED,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IACO,MAAM,CAAC,oBAAoB,CAAC,SAAiB;QACnD,OAAO,GAAG,cAAc,GAAG,SAAS,GAAG,cAAc,EAAE,CAAC;IAC1D,CAAC;IAEO,aAAa;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;QACjC,IAAI,IAAI,KAAK,cAAc,CAAC,UAAU,EAAE;YACtC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC9B;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,EAAC,CAAC,CAAC;YACvG,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;IACH,CAAC;IAED,IAAY,cAAc;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;QAClD,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACtC,CAAC;IAEO,cAAc;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;QACjC,IAAI,IAAI,KAAK,cAAc,CAAC,WAAW,EAAE;YACvC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC,CAAC;SAC/F;QACD,IAAI,IAAI,KAAK,cAAc,CAAC,QAAQ,EAAE;YACpC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;SAC/E;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,aAAa;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;QACjC,IAAI,IAAI,KAAK,cAAc,CAAC,WAAW,EAAE;YACvC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC,CAAC;SAChH;aAAM,IAAI,IAAI,KAAK,cAAc,CAAC,QAAQ,EAAE;YAC3C,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC,CAAC;SAC/G;IACH,CAAC;IAEO,aAAa,CAAC,SAAkB,EAAE,SAAiB;QACzD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,SAAS,GAAG,oBAAoB,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,QAAQ,CAAC,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,IAAI,CAAC,gBAAgB,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;IACtD,CAAC;CACF;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,uCAAuC,CAAC;AACtE,MAAM,CAAC,MAAM,cAAc,GAAG,GAAG,CAAC;AAElC,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,UAAU,EAAE,YAAY;IACxB,WAAW,EAAE,aAAa;IAC1B,QAAQ,EAAE,UAAU;CACrB,CAAC","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport breakpointEditDialogStyles from './breakpointEditDialog.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Screen reader label for a select box that chooses the breakpoint type in the Sources panel when editing a breakpoint\n  */\n  breakpointType: 'Breakpoint type',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  breakpoint: 'Breakpoint',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  conditionalBreakpoint: 'Conditional breakpoint',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  logpoint: 'Logpoint',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  expressionToCheckBeforePausingEg: 'Expression to check before pausing, e.g. x > 5',\n  /**\n  *@description Type selector element title in Breakpoint Edit Dialog of the Sources panel\n  */\n  pauseOnlyWhenTheConditionIsTrue: 'Pause only when the condition is true',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel. It is used as\n  *the placeholder for a text input field before the user enters text. Provides the user with\n  *an example on how to use Logpoints. 'Log' is a verb and 'message' is a noun.\n  *See: https://developer.chrome.com/blog/new-in-devtools-73/#logpoints\n  */\n  logMessageEgXIsX: 'Log message, e.g. `\\'x is\\', x`',\n  /**\n  *@description Type selector element title in Breakpoint Edit Dialog of the Sources panel\n  */\n  logAMessageToConsoleDoNotBreak: 'Log a message to Console, do not break',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/BreakpointEditDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class BreakpointEditDialog extends UI.Widget.Widget {\n  private readonly onFinish: (arg0: {\n    committed: boolean,\n    condition: string,\n  }) => Promise<void>;\n  private finished: boolean;\n  private editor: TextEditor.TextEditor.TextEditor;\n  private isLogpoint: boolean;\n  private readonly typeSelector: UI.Toolbar.ToolbarComboBox;\n  private placeholderCompartment: CodeMirror.Compartment;\n\n  static async create(\n      editorLineNumber: number,\n      oldCondition: string,\n      preferLogpoint: boolean,\n      onFinish: (arg0: {committed: boolean, condition: string}) => Promise<void>,\n      ): Promise<BreakpointEditDialog> {\n    const TextEditor = await import('../../ui/components/text_editor/text_editor.js');\n    const CodeMirror = await import('../../third_party/codemirror.next/codemirror.next.js');\n    const editorConfig = [\n      (await CodeMirror.javascript()).javascriptLanguage,\n      TextEditor.Config.baseConfiguration(oldCondition || ''),\n      CodeMirror.EditorView.lineWrapping,\n      TextEditor.Config.showCompletionHint,\n      await TextEditor.JavaScript.completion(),\n      TextEditor.JavaScript.argumentHints(),\n    ];\n    return new BreakpointEditDialog(\n        editorLineNumber, oldCondition, preferLogpoint, onFinish, TextEditor, CodeMirror, editorConfig);\n  }\n\n  constructor(\n      editorLineNumber: number,\n      oldCondition: string,\n      preferLogpoint: boolean,\n      onFinish: (arg0: {committed: boolean, condition: string}) => Promise<void>,\n      modTextEditor: typeof TextEditor,\n      readonly modCodeMirror: typeof CodeMirror,\n      editorConfig: CodeMirror.Extension,\n  ) {\n    super(true);\n\n    this.onFinish = onFinish;\n    this.finished = false;\n    this.element.tabIndex = -1;\n\n    const logpointPrefix = LogpointPrefix;\n    const logpointSuffix = LogpointSuffix;\n    this.isLogpoint = oldCondition.startsWith(logpointPrefix) && oldCondition.endsWith(logpointSuffix);\n    if (this.isLogpoint) {\n      oldCondition = oldCondition.substring(logpointPrefix.length, oldCondition.length - logpointSuffix.length);\n    }\n    this.isLogpoint = this.isLogpoint || preferLogpoint;\n\n    this.element.classList.add('sources-edit-breakpoint-dialog');\n    const toolbar = new UI.Toolbar.Toolbar('source-frame-breakpoint-toolbar', this.contentElement);\n    toolbar.appendText(`Line ${editorLineNumber + 1}:`);\n\n    this.typeSelector =\n        new UI.Toolbar.ToolbarComboBox(this.onTypeChanged.bind(this), i18nString(UIStrings.breakpointType));\n    this.typeSelector.createOption(i18nString(UIStrings.breakpoint), BreakpointType.Breakpoint);\n    const conditionalOption =\n        this.typeSelector.createOption(i18nString(UIStrings.conditionalBreakpoint), BreakpointType.Conditional);\n    const logpointOption = this.typeSelector.createOption(i18nString(UIStrings.logpoint), BreakpointType.Logpoint);\n    this.typeSelector.select(this.isLogpoint ? logpointOption : conditionalOption);\n    toolbar.appendToolbarItem(this.typeSelector);\n\n    const content = oldCondition || '';\n    const finishIfComplete = (view: CodeMirror.EditorView): boolean => {\n      if (modTextEditor.JavaScript.isExpressionComplete(view.state)) {\n        this.finishEditing(true, this.editor.state.doc.toString());\n        return true;\n      }\n      return false;\n    };\n    const keymap = [\n      {\n        key: 'Mod-Enter',\n        run: finishIfComplete,\n      },\n      {\n        key: 'Enter',\n        run: finishIfComplete,\n      },\n      {\n        ...modCodeMirror.standardKeymap.find(binding => binding.key === 'Enter') as CodeMirror.KeyBinding,\n        key: 'Shift-Enter',\n      },\n      {\n        key: 'Escape',\n        run: (): boolean => {\n          this.finishEditing(false, '');\n          return true;\n        },\n      },\n    ];\n\n    this.placeholderCompartment = new modCodeMirror.Compartment();\n\n    const editorWrapper = this.contentElement.appendChild(document.createElement('div'));\n    editorWrapper.classList.add('condition-editor');\n\n    this.editor = new modTextEditor.TextEditor.TextEditor(modCodeMirror.EditorState.create({\n      doc: content,\n      selection: {anchor: 0, head: content.length},\n      extensions: [\n        this.placeholderCompartment.of(this.getPlaceholder()),\n        modCodeMirror.keymap.of(keymap),\n        editorConfig,\n      ],\n    }));\n    editorWrapper.appendChild(this.editor);\n\n    this.updateTooltip();\n\n    this.element.addEventListener('blur', event => {\n      if (!event.relatedTarget ||\n          (event.relatedTarget && !(event.relatedTarget as Node).isSelfOrDescendant(this.element))) {\n        this.finishEditing(true, this.editor.state.doc.toString());\n      }\n    }, true);\n  }\n\n  focusEditor(): void {\n    this.editor.editor.focus();\n  }\n  private static conditionForLogpoint(condition: string): string {\n    return `${LogpointPrefix}${condition}${LogpointSuffix}`;\n  }\n\n  private onTypeChanged(): void {\n    const type = this.breakpointType;\n    if (type === BreakpointType.Breakpoint) {\n      this.finishEditing(true, '');\n    } else {\n      this.editor.editor.dispatch({effects: this.placeholderCompartment.reconfigure(this.getPlaceholder())});\n      this.updateTooltip();\n    }\n  }\n\n  private get breakpointType(): string|null {\n    const option = this.typeSelector.selectedOption();\n    return option ? option.value : null;\n  }\n\n  private getPlaceholder(): CodeMirror.Extension {\n    const type = this.breakpointType;\n    if (type === BreakpointType.Conditional) {\n      return this.modCodeMirror.placeholder(i18nString(UIStrings.expressionToCheckBeforePausingEg));\n    }\n    if (type === BreakpointType.Logpoint) {\n      return this.modCodeMirror.placeholder(i18nString(UIStrings.logMessageEgXIsX));\n    }\n    return [];\n  }\n\n  private updateTooltip(): void {\n    const type = this.breakpointType;\n    if (type === BreakpointType.Conditional) {\n      UI.Tooltip.Tooltip.install((this.typeSelector.element), i18nString(UIStrings.pauseOnlyWhenTheConditionIsTrue));\n    } else if (type === BreakpointType.Logpoint) {\n      UI.Tooltip.Tooltip.install((this.typeSelector.element), i18nString(UIStrings.logAMessageToConsoleDoNotBreak));\n    }\n  }\n\n  private finishEditing(committed: boolean, condition: string): void {\n    if (this.finished) {\n      return;\n    }\n    this.finished = true;\n    this.editor.remove();\n    if (this.isLogpoint) {\n      condition = BreakpointEditDialog.conditionForLogpoint(condition);\n    }\n    this.onFinish({committed, condition});\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([breakpointEditDialogStyles]);\n  }\n}\n\nexport const LogpointPrefix = '/** DEVTOOLS_LOGPOINT */ console.log(';\nexport const LogpointSuffix = ')';\n\nexport const BreakpointType = {\n  Breakpoint: 'Breakpoint',\n  Conditional: 'Conditional',\n  Logpoint: 'Logpoint',\n};\n"]}